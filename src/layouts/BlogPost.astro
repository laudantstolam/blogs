---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { getUrl } from '../utils/url';
import "../styles/callout.css"

interface Props extends CollectionEntry<'blog'>['data'] {}

const {
    title,
    subtitle,
    description = '',
    created_date,
    updated_date,
    featured_image,
    featured_image_alt,
    tags = [],
    meta_title,
    meta_description,
    canonical_url,
    og_title,
    og_description,
    og_image,
    og_type,
    twitter_title,
    twitter_description,
    twitter_image,
    twitter_card,
    keywords,
    author,
    no_index,
} = Astro.props;

const safeTags = tags ?? [];
---

<html lang="en">
	<head>
		<BaseHead
			title={title}
			description={description}
			featured_image={featured_image}
			featured_image_alt={featured_image_alt}
			meta_title={meta_title}
			meta_description={meta_description}
			canonical_url={canonical_url}
			og_title={og_title}
			og_description={og_description}
			og_image={og_image}
			og_type={og_type}
			twitter_title={twitter_title}
			twitter_description={twitter_description}
			twitter_image={twitter_image}
			twitter_card={twitter_card}
			keywords={[...safeTags, ...(keywords || [])]}
			author={author}
			no_index={no_index}
		/>
		
		<!-- KaTeX CSS for LaTeX rendering -->
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.0/dist/katex.min.css">

		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			.prose {
				width: 920px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: rgb(var(--gray-dark));
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.subtitle {
				color: rgb(var(--gray));
				font-size: 1.25em;
				margin-bottom: 1em;
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
			}
			.tags {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5em;
				margin: 1em 0;
				justify-content: center;
			}
			.tag {
				background-color: rgba(var(--gray-light), 0.5);
				color: rgb(var(--gray-dark));
				padding: 0.2em 0.8em;
				border-radius: 1em;
				font-size: 0.9em;
				text-decoration: none;
				transition: all 0.2s ease;
			}
			.tag:hover {
				background-color: rgba(var(--accent), 0.1);
				color: rgb(var(--accent));
				transform: translateY(-2px);
			}
			:global(.mermaid) {
				background: rgb(248, 250, 252);
				padding: 1.5rem;
				border-radius: 0.5rem;
				margin: 1rem 0;
			}

			/* Table of Contents Styles */
			.toc-wrapper {
				position: fixed;
				top: 6rem;
				right: 2rem;
				width: auto;
				max-height: calc(100vh - 8rem);
				overflow-y: auto;
				padding: 1rem 1.2rem;
				background: rgba(var(--gray-light), 0.3);
				backdrop-filter: blur(12px);
				border-radius: 12px;
				border: 1px solid rgba(var(--gray), 0.2);
				box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
				z-index: 100;
				transition: all 0.3s ease;
			}
			.toc-wrapper.minimized {
				width: auto;
				padding: 0.8rem;
				overflow: hidden;
			}
			.toc-wrapper.minimized .toc-content {
				display: none;
			}
			.toc-wrapper.minimized .toc-header {
				border-bottom: none;
				margin-bottom: 0;
			}
			.toc-wrapper::-webkit-scrollbar {
				width: 6px;
			}
			.toc-wrapper::-webkit-scrollbar-track {
				background: transparent;
			}
			.toc-wrapper::-webkit-scrollbar-thumb {
				background: rgba(var(--accent), 0.3);
				border-radius: 3px;
			}
			.toc-wrapper::-webkit-scrollbar-thumb:hover {
				background: rgba(var(--accent), 0.5);
			}
			.toc-header {
				display: flex;
				align-items: center;
				justify-content: space-between;
				margin-bottom: 0.8rem;
				padding-bottom: 0.4rem;
				border-bottom: 1px solid rgba(var(--gray), 0.2);
			}
			.toc-title {
				font-size: 0.9em;
				font-weight: 600;
				color: rgb(var(--gray-dark));
				display: flex;
				align-items: center;
				gap: 0.7rem;
			}
			.toc-minimize-btn {
				background: none;
				border: none;
				color: rgb(var(--gray));
				cursor: pointer;
				padding: 0.2rem 0.4rem;
				font-size: 1.1em;
				font-weight: 600;
				display: flex;
				align-items: center;
				justify-content: center;
				border-radius: 4px;
				transition: all 0.2s ease;
				line-height: 1;
			}
			.toc-minimize-btn:hover {
				background: rgba(var(--gray), 0.1);
				color: rgb(var(--accent));
			}
			.toc-list {
				list-style: none;
				padding: 0;
				margin: 0;
			}
			:global(.toc-list li) {
				margin: 0;
				position: relative;
				list-style: none;
			}
			:global(.toc-list ul) {
				list-style: none;
				padding: 0;
				margin: 0;
			}
			:global(.toc-list .toc-item) {
				display: flex;
				align-items: center;
			}
			:global(.toc-list .toc-toggle) {
				background: none;
				border: none;
				color: rgb(var(--gray));
				cursor: pointer;
				padding: 0.2rem;
				margin-right: 0.3rem;
				font-size: 0.7em;
				display: flex;
				align-items: center;
				justify-content: center;
				width: 16px;
				height: 16px;
				border-radius: 3px;
				transition: all 0.2s ease;
				flex-shrink: 0;
			}
			:global(.toc-list .toc-toggle:hover) {
				background: rgba(var(--gray), 0.1);
			}
			:global(.toc-list .toc-toggle.collapsed) {
				transform: rotate(-90deg);
			}
			:global(.toc-list a) {
				color: rgb(var(--gray));
				text-decoration: none;
				line-height: 1.4;
				transition: all 0.2s ease;
				display: block;
				padding: 0.3rem 0.5rem;
				flex: 1;
				border-radius: 4px;
			}
			:global(.toc-list a:hover) {
				color: rgb(var(--accent));
				background: rgba(var(--gray), 0.1);
			}
			:global(.toc-list a.active) {
				color: rgb(var(--accent-dark));
				background: rgba(var(--accent), 0.15);
				font-weight: 500;
				border: 1px solid rgba(var(--accent), 0.3);
			}
			
			/* toc css */
			:global(.toc-list .toc-h1) {
				font-size: 0.9em;
				font-weight: 600;
			}
			:global(.toc-list .toc-h1-item) {
				padding-left: 0;
			}
			
			:global(.toc-list .toc-h2) {
				font-size: 0.87em;
			}
			:global(.toc-list .toc-h2-item) {
				padding-left: 1rem;
			}
			
			:global(.toc-list .toc-h3) {
				font-size: 0.84em;
			}
			:global(.toc-list .toc-h3-item) {
				padding-left: 1rem;
			}
			
			:global(.toc-list .toc-h4) {
				font-size: 0.81em;
			}
			:global(.toc-list .toc-h4-item) {
				padding-left: 2rem;
			}
			
			:global(.toc-list .toc-h5) {
				font-size: 0.78em;
			}
			:global(.toc-list .toc-h5-item) {
				padding-left: 3rem;
			}
			
			:global(.toc-list .toc-children) {
				display: block;
			}
			:global(.toc-list .toc-children.collapsed) {
				display: none;
			}

			/* Mobile: Show TOC at top */
			@media (max-width: 1024px) {
				.toc-wrapper {
					position: relative;
					top: 0;
					right: 0;
					width: 100%;
					max-width: 100%;
					margin: 0 0 2rem 0;
					max-height: none;
				}
			}

			/* Hide TOC on very small screens */
			@media (max-width: 640px) {
				.toc-wrapper {
					display: none;
				}
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="prose">
					<div class="title">
							{created_date && (
								<div class="date">
									<FormattedDate date={created_date} />
									{updated_date && updated_date > created_date && (
										<span> (Updated: <FormattedDate date={updated_date} />)</span>
									)}
								</div>
							)}
							<h1>{title}</h1>
							{subtitle && <div class="subtitle">{subtitle}</div>}
							{safeTags.length > 0 && (
								<div class="tags">
									{safeTags.map((tag) => (
										<a href={getUrl(`/tag/${tag}/`)} class="tag">#{tag}</a>
									))}
								</div>
							)}
							{featured_image && (
								<div class="hero-image">
									<img
										width={1020}
										height={510}
										src={featured_image}
										alt={featured_image_alt || ''}
									/>
								</div>
							)}
					</div>
					
					<!-- Table of Contents -->
					<aside class="toc-wrapper" id="toc-wrapper">
						<div class="toc-header">
							<div class="toc-title">
								<span>ðŸ‘€</span>
								<button class="toc-minimize-btn" id="toc-minimize-btn" aria-label="Toggle TOC">
									<span id="toc-icon">âˆ’</span>
								</button>
							</div>
						</div>
						<div class="toc-content">
							<ul class="toc-list" id="toc-list"></ul>
						</div>
					</aside>
					
					<slot />
				</div>
			</article>
		</main>
		<Footer />
		
		<script>
			import mermaid from 'mermaid';
			
			function initTOC() {
				const article = document.querySelector('.prose');
				const tocList = document.getElementById('toc-list');
				
				if (article && tocList) {
					// exclude title
					const titleSection = article.querySelector('.title');
					const allHeadings = article.querySelectorAll('h1, h2, h3, h4, h5');
					const headings = Array.from(allHeadings).filter(heading => {
						return !titleSection || !titleSection.contains(heading);
					});
					
					tocList.innerHTML = '';
					
					if (headings.length === 0) {
						tocList.innerHTML = '<li style="color: rgb(var(--gray)); font-size: 0.9em;">ç„¡ç›®éŒ„é …ç›®</li>';
						return;
					}
					
					const stack = [{ level: 0, element: tocList }];
					
					headings.forEach((heading, index) => {
						const id = heading.id || `heading-${index}`;
						if (!heading.id) {
							heading.id = id;
						}
						
						const level = parseInt(heading.tagName.charAt(1));
						const text = heading.textContent;
						
						while (stack.length > 1 && stack[stack.length - 1].level >= level) {
							stack.pop();
						}
						
						const parent = stack[stack.length - 1];
						const parentElement = parent.children || parent.element;
						
						// create toc
						const li = document.createElement('li');
						li.className = `toc-h${level}-item`;
						
						const itemDiv = document.createElement('div');
						itemDiv.className = 'toc-item';
						
						// checking H1 H2 H3 --> for collapse-able
						let hasChildren = false;
						if (level <= 3) {
							const currentIndex = Array.from(headings).indexOf(heading);
							for (let i = currentIndex + 1; i < headings.length; i++) {
								const nextLevel = parseInt(headings[i].tagName.charAt(1));
								if (nextLevel <= level) break;
								if (nextLevel === level + 1) {
									hasChildren = true;
									break;
								}
							}
						}
						
						if (hasChildren) {
							const toggle = document.createElement('button');
							toggle.className = 'toc-toggle';
							toggle.innerHTML = 'â–¼';
							toggle.setAttribute('aria-label', 'Toggle section');
							itemDiv.appendChild(toggle);
							
							// add child
							const childrenUl = document.createElement('ul');
							childrenUl.className = 'toc-children';
							li.appendChild(childrenUl);
							
							// Toggle
							toggle.addEventListener('click', (e) => {
								e.stopPropagation();
								toggle.classList.toggle('collapsed');
								childrenUl.classList.toggle('collapsed');
							});
							
							stack.push({ level, element: li, children: childrenUl });
						}
						
						// add link
						const a = document.createElement('a');
						a.href = `#${id}`;
						a.textContent = text;
						a.className = `toc-h${level}`;
						a.dataset.id = id;
						
						itemDiv.appendChild(a);
						li.insertBefore(itemDiv, li.firstChild);
						
						parentElement.appendChild(li);
					});

					// smooth scroll
					tocList.querySelectorAll('a').forEach(link => {
						link.addEventListener('click', (e) => {
							e.preventDefault();
							const id = link.dataset.id;
							const target = document.getElementById(id);
							if (target) {
								const offset = 100;
								const targetPosition = target.getBoundingClientRect().top + window.pageYOffset - offset;
								window.scrollTo({
									top: targetPosition,
									behavior: 'smooth'
								});
								history.pushState(null, null, `#${id}`);
							}
						});
					});

					// Active state on scroll
					const observer = new IntersectionObserver((entries) => {
						entries.forEach(entry => {
							const id = entry.target.id;
							const tocLink = tocList.querySelector(`a[data-id="${id}"]`);
							
							if (entry.isIntersecting) {
								tocList.querySelectorAll('a').forEach(link => link.classList.remove('active'));
								if (tocLink) {
									tocLink.classList.add('active');
									// auto extend
									let parentUl = tocLink.closest('li').parentElement;
									while (parentUl && parentUl.classList.contains('toc-children')) {
										parentUl.classList.remove('collapsed');
										const parentLi = parentUl.closest('li');
										if (parentLi) {
											const toggle = parentLi.querySelector('.toc-toggle');
											if (toggle) toggle.classList.remove('collapsed');
											parentUl = parentLi.parentElement;
										} else {
											break;
										}
									}
								}
							}
						});
					}, {
						rootMargin: '-20% 0px -70% 0px'
					});

					headings.forEach(heading => observer.observe(heading));
				}
			}

			// Initialize on Astro page load
			document.addEventListener('astro:page-load', () => {
				mermaid.initialize({ 
					startOnLoad: true,
					theme: 'default'
				});
				initTOC();
				
				// TOC minimize functionality
				const tocWrapper = document.getElementById('toc-wrapper');
				const minimizeBtn = document.getElementById('toc-minimize-btn');
				const tocIcon = document.getElementById('toc-icon');
				
				if (minimizeBtn && tocWrapper && tocIcon) {
					minimizeBtn.addEventListener('click', () => {
						tocWrapper.classList.toggle('minimized');
						tocIcon.textContent = tocWrapper.classList.contains('minimized') ? '+' : 'âˆ’';
					});
				}
			});

			// Also initialize on DOMContentLoaded as fallback
			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', () => {
					initTOC();
					
					const tocWrapper = document.getElementById('toc-wrapper');
					const minimizeBtn = document.getElementById('toc-minimize-btn');
					const tocIcon = document.getElementById('toc-icon');
					
					if (minimizeBtn && tocWrapper && tocIcon) {
						minimizeBtn.addEventListener('click', () => {
							tocWrapper.classList.toggle('minimized');
							tocIcon.textContent = tocWrapper.classList.contains('minimized') ? '+' : 'âˆ’';
						});
					}
				});
			} else {
				initTOC();
				
				const tocWrapper = document.getElementById('toc-wrapper');
				const minimizeBtn = document.getElementById('toc-minimize-btn');
				const tocIcon = document.getElementById('toc-icon');
				
				if (minimizeBtn && tocWrapper && tocIcon) {
					minimizeBtn.addEventListener('click', () => {
						tocWrapper.classList.toggle('minimized');
						tocIcon.textContent = tocWrapper.classList.contains('minimized') ? '+' : 'âˆ’';
					});
				}
			}
		</script>
	</body>
</html>